using System;
using UnityEngine;

enum WolfState
{
    Idle,
    Moving,
    Dead,

    PreparingLunge,
    Lunging,
    Landing
}

// –í—ä–ª–∫—ä—Ç –∏–º–∞ 4 —Å—ä—Å—Ç–æ—è–Ω–∏—è, –∫–æ–≥–∞—Ç–æ —Å–µ —è–¥–æ—Å–∞:
// 1. —Ç–≤—ä—Ä–¥–µ –¥–∞–ª–µ—á –µ –æ—Ç –∏–≥—Ä–∞—á–∞ –∏ —Ç—Ä—è–±–≤–∞ –¥–∞ —Å–µ –ø—Ä–∏–±–ª–∏–∂–∏
// 2. –¥–æ—Å—Ç–∞—Ç—ä—á–Ω–æ –±–ª–∏–∑–æ –µ –¥–æ –∏–≥—Ä–∞—á–∞, –∑–∞ –¥–∞ —Å–∫–æ—á–∏ –∫—ä–º –Ω–µ–≥–æ, –ø–æ–¥–≥–æ—Ç–≤—è —Å–µ –¥–∞ —Å–∫–æ—á–∏
// 3. –ª–µ—Ç–∏ –≤—ä–≤ –≤—ä–∑–¥—É—Ö–∞ —Å–ª–µ–¥ –∫–∞—Ç–æ –µ —Å–∫–æ—á–∏–ª
// 4. –ø—Ä–∏–∑–µ–º—è–≤–∞ —Å–µ —Å–ª–µ–¥ —Å–∫–æ–∫–∞ —Å–∏

public class WolfScript : EnemyScript
{
    [SerializeField]
    WolfState currState = WolfState.Idle;

    // Whether the Wolf is angry. Determined by whether it's seen the player.
    bool agitated = false;

    // Location the farmer will try to move to in his moving state.
    // When the point is reached, the farmer stops.
    DateTime lastMoveTime = DateTime.Now;
    Vector2 moveStart = new(0, 0);
    Vector2 moveTarget = new(0, 0);

    System.Random random = new();

    // The direction towards which the Wolf is walking/running.
    Vector2 moveDirection;

    public void Lunge()
    {
        // TODO(Mario):
        //   –í –º–æ–º–µ–Ω—Ç–∞ –≤—ä–ª–∫–∞ –ø–µ—Ä—Ñ–µ–∫—Ç–Ω–æ —Ç–µ –ø—Ä–µ—Å–∫–∞—á–∞, –∞ –∏–¥–µ—è—Ç–∞ –µ –¥–∞ –º–∏–Ω–∞–≤–∞ –Ω–∞
        //   –≤–∏—Å–æ—á–∏–Ω–∞ –ª–∏—Ü–µ—Ç–æ —Ç–∏, –æ—Å–≤–µ–Ω –∞–∫–æ –Ω–µ –∫–ª–µ–∫–Ω–µ—à.
        myBody.AddForce(new Vector3((moveDirection * 40).x, 30, 0), ForceMode2D.Impulse);
        currState = WolfState.Lunging;
    }

    // Change where the Wolf is moving to.
    void UpdateMoveDirection() {
        if(agitated) {
            moveDirection = new Vector2((player.transform.position - transform.position).x, 0).normalized;
            TurnTowardsPoint(player.transform.position);
        } else {
            Vector2 pos = transform.position;
            moveDirection = new Vector2((moveTarget - moveStart).x, 0).normalized;
            TurnTowardsPoint(moveTarget);
        }
    }

    /// How close the wolf needs to get to the player before jumping at him.
    [SerializeField] float maxDistanceBeforeLunge = 10;

    // Run the logic of the Wolf.
    void FixedUpdate()
    {
        // If the Wolf is dead, stop running logic for it.
        if (currState == WolfState.Dead)
            return;

        // NOTE(Mario):
        //   –°–ø–æ—Ä–µ–¥ —Ç–æ–∑–∏ –∫–æ–¥, –≤–µ–¥–Ω—ä–∂ —â–æ–º —Ç–µ –µ –≤–∏–¥—è–ª, –≤—ä–ª–∫—ä—Ç –≤–∏–Ω–∞–≥–∏ –∑–Ω–∞–µ –∫—ä–¥–µ —Å–∏.
        //   –¢–æ–≤–∞ –û–ö –ª–∏ –µ?
        if (!agitated && SeesPlayer())
        {
            Debug.Log("BRRR IM ANGY üò†");
            agitated = true;
            animator.SetBool("Moving", true);
            animator.SetBool("Running", true);
            UpdateMoveDirection();
            currState = WolfState.Moving;
            myBody.drag = 0.8f;
        }
        else if (agitated && currState == WolfState.Moving)
            moveTarget = player.transform.position;


        // We can die at any time, so we handle it outside the switch-case.
        if (health <= 0 && currState != WolfState.Dead)
        {
            myBody.simulated = false;
            currState = WolfState.Dead;
            animator.SetBool("Alive", false);
            return;
        }

        Debug.DrawRay(
            transform.position,
            myBody.velocity,
            myBody.velocity.magnitude < 0.05 ? Color.red : Color.green);
        Debug.DrawLine(transform.position, moveTarget, Color.magenta);

        switch (currState)
        {
            case WolfState.Dead:
                return;
            case WolfState.Idle:
                if (lastMoveTime == null || DateTime.Now - lastMoveTime > new TimeSpan(0, 0, 5))
                {
                    lastMoveTime = DateTime.Now;
                    moveStart = transform.position;
                    moveTarget = transform.position + new Vector3(random.Next(1, 3) * 20 - 30, 0);
                    currState = WolfState.Moving;
                    UpdateMoveDirection();
                    animator.SetBool("Moving", true);
                }
                break;
            case WolfState.Moving:
                Vector2 pos = transform.position;
                Vector2 targetDir = (moveTarget - pos).normalized;

                float moveForce = agitated ? runSpeed : walkSpeed;
                /// Calculate the "final force" that will be applied, which is the moveForce, limited by the maximum velocity.
                float finalForce = Math.Min(
                    // NOTE(Mario):
                    //   (maxVelocity - currentVelocity) –º–æ–∂–µ –¥–∞ —Å—Ç–∞–Ω–µ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª–Ω–æ –∏ –º–Ω–æ–≥–æ –±—ä—Ä–∑–æ —Å—Ç–∞–≤–∞ –º–Ω–æ–≥–æ —Å–º–µ—à–Ω–æ - –≤—ä–ª–∫—ä—Ç
                    //   —Ö–≤—Ä—ä–∫–≤–∞ –Ω–∞ —Ö–∏–ª—è–¥–∏ –µ–¥–∏–Ω–∏—Ü–∏ –≤ –≥—Ä–µ—à–Ω–∞—Ç–∞ –ø–æ—Å–æ–∫–∞. –ó–∞—Ç–æ–≤–∞, –∞–∫–æ –µ –ø–æ–¥ 0, –ø—Ä–æ—Å—Ç–æ –≥–æ –∑–∞–º–µ—Å—Ç–≤–∞–º–µ —Å –Ω—É–ª–∞.
                    Math.Max(0, maxVelocity - myBody.velocity.magnitude),
                    moveForce
                );
                myBody.AddForce(moveDirection * finalForce, ForceMode2D.Impulse);

                if (!agitated) {
                    currState = WolfState.Idle;
                    animator.SetBool("Moving", false);
                }

                float distToPlayer = (player.transform.position - transform.position).magnitude;

                if (distToPlayer <= maxDistanceBeforeLunge)
                {
                    animator.SetBool("Lunging", true);
                    myBody.velocity = Vector3.zero;
                    currState = WolfState.PreparingLunge;
                    break;
                }

                UpdateMoveDirection();
                moveStart = transform.position;
                TurnTowardsPoint(player.transform.position);
                break;
            case WolfState.PreparingLunge:
                break;
            case WolfState.Lunging:
                if (Vector2.Dot(myBody.velocity.normalized, new Vector2(0, -1)) >= 0.3)
                {
                    animator.SetBool("Lunging", false);
                    currState = WolfState.Landing;
                }
                break;
            case WolfState.Landing:
                if (myBody.velocity.y < 0.3)
                {
                    moveStart = transform.position;
                    TurnTowardsPoint(player.transform.position);
                    UpdateMoveDirection();
                    currState = WolfState.Moving;
                }
                break;
        }
    }
}
